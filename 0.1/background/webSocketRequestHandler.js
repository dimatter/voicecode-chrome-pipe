// Generated by CoffeeScript 1.10.0
(function() {
  var WebSocketRequestHandler;

  WebSocketRequestHandler = (function() {
    function WebSocketRequestHandler(socket, data) {
      this.socket = socket;
      this.parse(data);
    }

    WebSocketRequestHandler.prototype.parse = function(data) {
      var argumentList, argumentsObject, callbackArguments, callbackName, error, error1, message, method, namespace, parameters, request, tabId;
      try {
        data = JSON.parse(data);
        console.info('<<<<', data);
        request = data.request, parameters = data.parameters;
        switch (request) {
          case 'backgroundMethod':
            method = parameters.method, argumentsObject = parameters.argumentsObject;
            return vc[method].call(this, argumentsObject);
          case 'tabMessage':
            tabId = parameters.tabId, message = parameters.message, callbackName = parameters.callbackName, callbackArguments = parameters.callbackArguments;
            return chrome.tabs.sendMessage(tabId, message, (function(_this) {
              return function() {
                var _callbackArguments;
                if (callbackName == null) {
                  return false;
                }
                if ((callbackArguments != null) && callbackArguments.length) {
                  _callbackArguments = _.object(callbackArguments, _.toArray(arguments));
                } else {
                  _callbackArguments = _.toArray(arguments);
                }
                return _this.socket.send({
                  type: 'tabMessageCallback',
                  parameters: {
                    tabId: tabId,
                    callbackName: callbackName,
                    callbackArguments: _callbackArguments
                  }
                });
              };
            })(this));
          case 'chromeApi':
            namespace = parameters.namespace, method = parameters.method, argumentList = parameters.argumentList, callbackName = parameters.callbackName, callbackArguments = parameters.callbackArguments;
            if (callbackName != null) {
              argumentList.push((function(_this) {
                return function() {
                  var _callbackArguments;
                  if ((callbackArguments != null) && callbackArguments.length) {
                    _callbackArguments = _.object(callbackArguments, _.toArray(arguments));
                  } else {
                    _callbackArguments = _.toArray(arguments);
                  }
                  return _this.socket.send({
                    type: 'executionCallback',
                    parameters: {
                      namespace: namespace,
                      method: method,
                      callbackName: callbackName,
                      callbackArguments: _callbackArguments
                    }
                  });
                };
              })(this));
            }
            return chrome[namespace][method].apply(this, argumentList);
          case 'eventListener':
            namespace = parameters.namespace, method = parameters.method, callbackName = parameters.callbackName, callbackArguments = parameters.callbackArguments;
            return chrome[namespace][method].addListener((function(_this) {
              return function() {
                var _callbackArguments;
                if (!_this.socket.alive) {
                  chrome[namespace][method].removeListener(_this);
                  return;
                }
                if (callbackName == null) {
                  return;
                }
                if ((callbackArguments != null) && callbackArguments.length) {
                  _callbackArguments = _.object(callbackArguments, _.toArray(arguments));
                } else {
                  _callbackArguments = _.toArray(arguments);
                }
                return _this.socket.send({
                  type: 'eventListenerCallback',
                  parameters: {
                    namespace: namespace,
                    event: method,
                    callbackName: callbackName,
                    callbackArguments: _callbackArguments
                  }
                });
              };
            })(this));
        }
      } catch (error1) {
        error = error1;
        console.error(error);
        return this.socket.send({
          type: 'error',
          parameters: {
            callbackName: 'browserError',
            callbackArguments: {
              error: error
            }
          }
        });
      }
    };

    return WebSocketRequestHandler;

  })();

  window.WebSocketRequestHandler = WebSocketRequestHandler;

}).call(this);
