// Generated by CoffeeScript 1.10.0
(function() {
  var WebSocketWrapper, config;

  config = {
    host: 'localhost',
    port: 4445,
    heartbeat: 10000
  };

  WebSocketWrapper = (function() {
    function WebSocketWrapper() {
      this.heartbeat = null;
      this.socket = new WebSocket('ws://' + config.host + ':' + config.port + '/');
      this.alive = false;
      this.socket.onopen = (function(_this) {
        return function() {
          console.info("Connected to voicecode!");
          _this.alive = true;
          return _this.heartbeat = setInterval(function() {
            return _this.send({
              type: 'heartbeat',
              parameters: {}
            });
          }, config.heartbeat);
        };
      })(this);
      this.socket.onmessage = (function(_this) {
        return function(event) {
          return new WebSocketRequestHandler(_this, event.data);
        };
      })(this);
      this.socket.onerror = (function(_this) {
        return function() {
          return _this.socket.close();
        };
      })(this);
      this.socket.onclose = (function(_this) {
        return function() {
          return _this.close();
        };
      })(this);
    }

    WebSocketWrapper.prototype.send = function(payload) {
      if (!this.alive) {
        console.error('Cannot send while socket is dead!');
        return;
      }
      console.info('>>>>', payload);
      return this.socket.send(JSON.stringify(payload));
    };

    WebSocketWrapper.prototype.close = function() {
      var attribute, i, len, ref;
      console.error('Socket closed...');
      clearInterval(this.heartbeat);
      this.alive = false;
      ref = ['heartbeat', 'socket'];
      for (i = 0, len = ref.length; i < len; i++) {
        attribute = ref[i];
        delete this[attribute];
      }
      delete window.socket;
      return setTimeout(function() {
        return window.socket = new WebSocketWrapper;
      }, config.heartbeat);
    };

    return WebSocketWrapper;

  })();

  window.WebSocketWrapper = WebSocketWrapper;

}).call(this);
