// Generated by CoffeeScript 1.10.0
(function() {
  var VoiceCodeForeground;

  VoiceCodeForeground = (function() {
    var frameId, instance, tabId;

    instance = null;

    frameId = null;

    tabId = null;

    function VoiceCodeForeground() {
      if (instance != null) {
        return instance;
      }
      this.debug = true;
      instance = this;
      this;
    }

    VoiceCodeForeground.prototype.shouldActivate = function() {
      if (window.innerWidth < 3 || window.innerHeight < 3) {
        return false;
      }
      return true;
    };

    VoiceCodeForeground.prototype.loadComplete = function() {
      if (!this.shouldActivate()) {
        return;
      }
      console.warn('loadComplete');
      window.keyboardController = new KeyboardController;
      window.keyboardController.registerCombo();
      freeTextBrowsing.activate();
      this.installListener(window, 'resize', _.bind(freeTextBrowsing.reset, freeTextBrowsing, 400));
      return this.installListener(window, 'scroll', _.bind(freeTextBrowsing.reset, freeTextBrowsing, 400));
    };

    VoiceCodeForeground.prototype.urlChanged = function() {
      if (this.debug) {
        console.warn('urlChanged');
      }
      return typeof freeTextBrowsing !== "undefined" && freeTextBrowsing !== null ? freeTextBrowsing.reset() : void 0;
    };

    VoiceCodeForeground.prototype.installListener = function(element, event, callback) {
      return element.addEventListener(event, function(eventObject) {
        return callback(eventObject);
      }, true);
    };

    VoiceCodeForeground.prototype.message = function(destination, type, parameters, callback) {
      if (callback == null) {
        callback = null;
      }
      return (function(callback) {
        var payload;
        payload = {
          destination: destination,
          type: type,
          parameters: parameters
        };
        if (this.debug) {
          console.debug('>>>>', payload);
        }
        return chrome.runtime.sendMessage(payload, function(response) {
          if (callback == null) {
            return false;
          }
          return callback.call(this, response);
        });
      })(callback);
    };

    VoiceCodeForeground.prototype.tabMessage = function() {
      return _.partial(this.message, 'tab').apply(window, arguments);
    };

    VoiceCodeForeground.prototype.backendMessage = function() {
      return _.partial(this.message, 'backend').apply(window, arguments);
    };

    VoiceCodeForeground.prototype.backgroundMessage = function() {
      return _.partial(this.message, 'background').apply(window, arguments);
    };

    VoiceCodeForeground.prototype.log = function() {
      if (this.debug) {
        return console.log.apply(console, arguments);
      }
    };

    VoiceCodeForeground.prototype.getIdentity = function() {
      return {
        frameId: frameId,
        tabId: tabId
      };
    };

    VoiceCodeForeground.prototype.setIdentity = function(arg) {
      var _frameId, _tabId;
      _tabId = arg.tabId, _frameId = arg.frameId;
      if (frameId == null) {
        frameId = _frameId;
      }
      if (tabId == null) {
        return tabId = _tabId;
      }
    };

    return VoiceCodeForeground;

  })();

  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    var _sendResponse, argumentsObject, funky, method, namespace, type;
    console.warn('onMessage', voiceCodeForeground.getIdentity(), request);
    _sendResponse = sendResponse;
    type = request.type, namespace = request.namespace, method = request.method, argumentsObject = request.argumentsObject;
    funky = window[namespace][method];
    switch (request.type) {
      case 'invoke':
        funky(argumentsObject);
        break;
      case 'invokeBound':
        funky.call(eval(namespace), argumentsObject);
        break;
      default:
        console.error("DON'T KNOW HOW TO HANDLE", request);
    }
    return true;
  });

  this.voiceCodeForeground = new VoiceCodeForeground;

  if (voiceCodeForeground.shouldActivate()) {
    voiceCodeForeground.installListener(window, 'click', function(event) {
      freeTextBrowsing.reset();
      return true;
    });
    voiceCodeForeground.installListener(window, 'focus', function(event) {
      if (event.target === window) {
        voiceCodeForeground.backendMessage('domEvent', {
          event: event.type,
          target: 'window'
        }, voiceCodeForeground.log);
      }
      return true;
    });
    voiceCodeForeground.installListener(window, 'blur', function(event) {
      if (event.target === window) {
        voiceCodeForeground.backendMessage('domEvent', {
          event: event.type,
          target: 'window'
        }, voiceCodeForeground.log);
      }
      return true;
    });
    $(document).ready(function() {
      return $('input, textarea').each(function() {
        var eventName, i, len, ref, results;
        ref = ['blur', 'focus'];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          eventName = ref[i];
          results.push(voiceCodeForeground.installListener($(this)[0], eventName, function(event) {
            if (event.type === 'focus') {
              freeTextBrowsing.deactivate();
            } else {
              freeTextBrowsing.activate();
            }
            voiceCodeForeground.backendMessage('domEvent', {
              event: event.type,
              target: event.target
            }, voiceCodeForeground.log);
            return true;
          }));
        }
        return results;
      });
    });
  }

  this.voiceCodeForeground.backgroundMessage('invoke', {
    namespace: 'voiceCodeBackground',
    method: 'getIdentity'
  }, this.voiceCodeForeground.setIdentity);

}).call(this);
