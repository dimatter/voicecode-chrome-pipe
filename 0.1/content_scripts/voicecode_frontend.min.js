// Generated by CoffeeScript 1.10.0
(function() {
  var installListener,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  this.vc = {
    tree: {},
    loadComplete: function() {
      return console.warn('loadComplete');
    },
    message: function(destination, type, parameters, callback) {
      return (function(callback) {
        var payload;
        payload = {
          destination: destination,
          type: type,
          parameters: parameters
        };
        console.info('>>>>', payload);
        return chrome.runtime.sendMessage(payload, function(response) {
          if (callback == null) {
            return false;
          }
          return callback.call(this, response);
        });
      })(callback);
    },
    voicecodeMessage: function() {
      return _.partial(this.message, 'voicecode').apply(window, arguments);
    },
    backgroundMessage: function() {
      return _.partial(this.message, 'background').apply(window, arguments);
    },
    _log: function() {},
    buildTree: function(visibleLinks) {
      var tree;
      tree = {};
      _.each(visibleLinks, function(link) {
        var parent, tokenArray;
        tokenArray = link.text.split(' ');
        parent = null;
        return _.each(tokenArray, function(token) {
          var base, base1, ref, ref1;
          if (tree[token] == null) {
            tree[token] = {};
          }
          if ((base = tree[token]).belongsTo == null) {
            base.belongsTo = [];
          }
          if (ref = link.elementId, indexOf.call(tree[token].belongsTo, ref) < 0) {
            tree[token].belongsTo.push(link.elementId);
          }
          if (parent != null) {
            if ((base1 = tree[parent]).children == null) {
              base1.children = [];
            }
            if (ref1 = link.elementId, indexOf.call(tree[parent].children, ref1) < 0) {
              tree[parent].children.push(token);
            }
          }
          return parent = token;
        });
      });
      return tree;
    },
    searchLinks: function(searchQuery, tree) {
      var childToken, getOwnersFor, owners, ref, restOfTokens, token;
      if (tree == null) {
        tree = vc.tree;
      }
      owners = [];
      getOwnersFor = function(token, childToken, restOfTokens) {
        var ref;
        if (tree[token] == null) {
          return owners;
        }
        if (owners.length !== 0) {
          owners = _.intersection(owners, tree[token].belongsTo);
        } else {
          owners = tree[token].belongsTo;
        }
        if ((childToken == null) && restOfTokens.length === 0) {
          return owners;
        }
        if (indexOf.call(tree[token].children, childToken) >= 0) {
          token = childToken;
          ref = restOfTokens, childToken = ref[0], restOfTokens = 2 <= ref.length ? slice.call(ref, 1) : [];
          owners = getOwnersFor(token, childToken, restOfTokens);
        }
        return owners;
      };
      ref = searchQuery.split(' '), token = ref[0], childToken = ref[1], restOfTokens = 3 <= ref.length ? slice.call(ref, 2) : [];
      return getOwnersFor(token, childToken, restOfTokens);
    },
    updateTree: function(event) {
      var counter, markerContainer, visibleLinks;
      if (event.type != null) {
        console.log("updateTree invoked by: " + event.type);
      }
      visibleLinks = [];
      $('#vc-markers').remove();
      markerContainer = $('<div>');
      markerContainer.attr('id', 'vc-markers');
      $('body').append(markerContainer);
      counter = 0;
      DomUtils.textContent.reset();
      $('a, button').each(function() {
        var elementId, rectangle, text;
        elementId = $(this).attr('id');
        if (elementId == null) {
          elementId = 'link' + Math.random().toString(36).replace('.', '');
          $(this).attr('id', elementId);
        }
        rectangle = DomUtils.getVisibleClientRect($(this)[0], true);
        if (rectangle) {
          text = DomUtils.textContent.get($(this)[0]);
          return visibleLinks.push({
            elementId: elementId,
            text: text,
            rectangle: rectangle,
            integerId: counter++
          });
        }
      });
      visibleLinks = _.map(visibleLinks, function(link) {
        var value;
        value = link.text;
        value = value.replace(/[\n\r\t]+/g, ' ');
        value = value.replace(/\W+/g, ' ');
        value = value.replace(/(\d+)\s+(\d+)/, "$1$2");
        value = value.replace(/\s+/g, ' ');
        value = value.replace(/^\s+/g, '');
        value = value.replace(/\s+$/g, '');
        if (value !== '') {
          link.text = value.toLowerCase();
          return link;
        } else {
          return null;
        }
      });
      visibleLinks = _.compact(visibleLinks);
      vc.tree = vc.buildTree(visibleLinks);
      return console.log(vc.tree);
    }
  };

  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    var _sendResponse, argumentsObject, method, namespace, type;
    console.warn('onMessage', request);
    _sendResponse = sendResponse;
    type = request.type, namespace = request.namespace, method = request.method, argumentsObject = request.argumentsObject;
    switch (request.type) {
      case 'invoke':
        window[namespace][method].apply(window, [
          argumentsObject, function() {
            return _sendResponse.apply(null, _.toArray(arguments));
          }
        ]);
    }
    return false;
  });

  installListener = function(element, event, callback) {
    return element.addEventListener(event, function() {
      return callback.apply(this, arguments);
    }, true);
  };

  installListener(window, 'focus', function(event) {
    if (event.target === window) {
      vc.voicecodeMessage('domEvent', {
        event: event.type,
        target: 'window'
      }, vc._log);
    }
    return true;
  });

  installListener(window, 'blur', function(event) {
    if (event.target === window) {
      vc.voicecodeMessage('domEvent', {
        event: event.type,
        target: 'window'
      }, vc._log);
    }
    return true;
  });

  $(document).ready(function() {
    var textInputTypes;
    textInputTypes = ["text", "search", "email", "url", "number", "password", "date", "tel"];
    return $(textInputTypes.join(', ')).each(function() {
      var eventName, i, len, ref, results;
      ref = ['blur', 'focus'];
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        eventName = ref[i];
        results.push(installListener($(this)[0], eventName, function(event) {
          vc.voicecodeMessage('domEvent', {
            event: event.type,
            target: event.target
          }, vc._log);
          return true;
        }));
      }
      return results;
    });
  });

  window.freeTextBrowsing = new FreeTextBrowsing;

  $(window).on('resize scroll', _.throttle(freeTextBrowsing.activate(), 1500, {
    leading: false
  }));

}).call(this);
