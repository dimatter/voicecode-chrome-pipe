// Generated by CoffeeScript 1.10.0
(function() {
  var FreeTextBrowsing;

  FreeTextBrowsing = (function() {
    var instance;

    instance = null;

    function FreeTextBrowsing() {
      if (instance != null) {
        return this;
      }
      this.isActive = false;
    }

    FreeTextBrowsing.prototype.activate = function() {
      if (this.isActive) {
        return;
      }
      this.generateLinkList();
      console.log(this.linkList);
      return this.isActive = true;
    };

    FreeTextBrowsing.prototype.reactivate = function() {
      this.deactivate();
      return this.activate();
    };

    FreeTextBrowsing.prototype.deactivate = function() {
      return this.isActive = false;
    };

    FreeTextBrowsing.prototype.generateLinkList = function() {
      console.warn('generateLinkText');
      DomUtilities.textContent.reset();
      this.linkList = {};
      this.labelMap = {};
      this.generateLabelMap();
      this.linkList = this.getVisibleClickableElements();
      this.linkList = _.map(this.linkList, (function(_this) {
        return function(link) {
          if (!((link.element.id != null) && link.element.id !== '')) {
            link.element.id = _this.generateId();
            link.id = link.element.id;
          }
          link.text = _this.getLinkText(link.element);
          return link;
        };
      })(this));
      return this.linkList = _.indexBy(this.linkList, 'id');
    };

    FreeTextBrowsing.prototype.dispatchLinkList = function(linkList) {
      linkList = _(linkList).map(function(link, id) {
        return {
          id: id,
          text: link.text
        };
      });
      return vc.voicecodeMessage('setLinkList', {
        callbackName: 'eventSetLinkList',
        callbackArguments: {
          linkList: linkList
        }
      }, null);
    };

    FreeTextBrowsing.prototype.dealWithWhiteSpaces = function(text) {
      text = text.replace(/[\n\r\t\s]+/g, ' ');
      text = text.replace(/^\s+/g, '');
      text = text.replace(/\s+$/g, '');
      text = text.replace(/^\s+$/g, '');
      return text;
    };

    FreeTextBrowsing.prototype.generateId = function() {
      var s4;
      s4 = function() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      };
      return 'id' + s4() + s4() + '-' + s4() + '-' + s4();
    };

    FreeTextBrowsing.prototype.generateLabelMap = function() {
      var forElement, i, label, labelText, labels, len, results;
      labels = document.querySelectorAll("label");
      results = [];
      for (i = 0, len = labels.length; i < len; i++) {
        label = labels[i];
        forElement = label.getAttribute("for");
        if (forElement) {
          labelText = label.textContent.trim();
          if (labelText[labelText.length - 1] === ":") {
            labelText = labelText.substr(0, labelText.length - 1);
          }
          results.push(this.labelMap[forElement] = labelText);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    FreeTextBrowsing.prototype.getVisibleClickable = function(element) {
      var areas, areasAndRects, clientRect, i, imgClientRects, isClickable, jsactionRule, jsactionRules, len, map, mapName, onlyHasTabIndex, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, ruleSplit, tabIndex, tabIndexValue, tagName, visibleElements;
      tagName = element.tagName.toLowerCase();
      isClickable = false;
      onlyHasTabIndex = false;
      visibleElements = [];
      if (tagName === "img") {
        mapName = element.getAttribute("usemap");
        if (mapName) {
          imgClientRects = element.getClientRects();
          mapName = mapName.replace(/^#/, "").replace("\"", "\\\"");
          map = document.querySelector("map[name=\"" + mapName + "\"]");
          if (map && imgClientRects.length > 0) {
            areas = map.getElementsByTagName("area");
            areasAndRects = DomUtilities.getClientRectsForAreas(imgClientRects[0], areas);
            visibleElements.push.apply(visibleElements, areasAndRects);
          }
        }
      }
      if (((ref = (ref1 = element.getAttribute("aria-hidden")) != null ? ref1.toLowerCase() : void 0) === "" || ref === "true") || ((ref2 = (ref3 = element.getAttribute("aria-disabled")) != null ? ref3.toLowerCase() : void 0) === "" || ref2 === "true")) {
        return [];
      }
      if (this.checkForAngularJs == null) {
        this.checkForAngularJs = (function() {
          var angularElements, i, j, len, len1, ngAttributes, prefix, ref4, ref5, separator;
          angularElements = document.getElementsByClassName("ng-scope");
          if (angularElements.length === 0) {
            return function() {
              return false;
            };
          } else {
            ngAttributes = [];
            ref4 = ['', 'data-', 'x-'];
            for (i = 0, len = ref4.length; i < len; i++) {
              prefix = ref4[i];
              ref5 = ['-', ':', '_'];
              for (j = 0, len1 = ref5.length; j < len1; j++) {
                separator = ref5[j];
                ngAttributes.push(prefix + "ng" + separator + "click");
              }
            }
            return function(element) {
              var attribute, k, len2;
              for (k = 0, len2 = ngAttributes.length; k < len2; k++) {
                attribute = ngAttributes[k];
                if (element.hasAttribute(attribute)) {
                  return true;
                }
              }
              return false;
            };
          }
        })();
      }
      isClickable || (isClickable = this.checkForAngularJs(element));
      if (element.hasAttribute("onclick") || ((ref4 = (ref5 = element.getAttribute("role")) != null ? ref5.toLowerCase() : void 0) === "button" || ref4 === "link") || ((ref6 = element.getAttribute("class")) != null ? ref6.toLowerCase().indexOf("button") : void 0) >= 0 || ((ref7 = (ref8 = element.getAttribute("contentEditable")) != null ? ref8.toLowerCase() : void 0) === "" || ref7 === "contentEditable" || ref7 === "true")) {
        isClickable = true;
      }
      if (element.hasAttribute("jsaction")) {
        jsactionRules = element.getAttribute("jsaction").split(";");
        for (i = 0, len = jsactionRules.length; i < len; i++) {
          jsactionRule = jsactionRules[i];
          ruleSplit = jsactionRule.split(":");
          isClickable || (isClickable = ruleSplit[0] === "click" || (ruleSplit.length === 1 && ruleSplit[0] !== "none"));
        }
      }
      switch (tagName) {
        case "a":
          isClickable = true;
          break;
        case "textarea":
          isClickable || (isClickable = !element.disabled && !element.readOnly);
          break;
        case "input":
          isClickable || (isClickable = !(((ref9 = element.getAttribute("type")) != null ? ref9.toLowerCase() : void 0) === "hidden" || element.disabled || (element.readOnly && DomUtilities.isSelectable(element))));
          break;
        case "button":
        case "select":
          isClickable || (isClickable = !element.disabled);
          break;
        case "label":
          isClickable || (isClickable = (element.control != null) && (this.getVisibleClickable(element.control)).length === 0);
      }
      tabIndexValue = element.getAttribute("tabindex");
      tabIndex = tabIndexValue === "" ? 0 : parseInt(tabIndexValue);
      if (!(isClickable || isNaN(tabIndex) || tabIndex < 0)) {
        isClickable = onlyHasTabIndex = true;
      }
      if (isClickable) {
        clientRect = DomUtilities.getVisibleClientRect(element, true);
        if (clientRect !== null) {
          visibleElements.push({
            element: element,
            rect: clientRect,
            secondClassCitizen: onlyHasTabIndex
          });
        }
      }
      return visibleElements;
    };

    FreeTextBrowsing.prototype.getLinkText = function(element) {
      var linkText, nodeName;
      linkText = '';
      nodeName = element.nodeName.toLowerCase();
      if (nodeName === "input") {
        if (this.labelMap[element.id]) {
          linkText = this.labelMap[element.id];
        } else if (element.type !== "password") {
          linkText = element.value;
          if (!linkText && 'placeholder' in element) {
            linkText = element.placeholder;
          }
        }
        if (linkText == null) {
          linkText = '';
        }
      } else if (nodeName === "a" && !element.textContent.trim() && element.firstElementChild && element.firstElementChild.nodeName.toLowerCase() === "img") {
        linkText = element.firstElementChild.alt || element.firstElementChild.title;
      } else {
        linkText = DomUtilities.textContent.get(element);
        if (linkText !== '') {
          this.handleWhiteSpaces(linkText);
        }
      }
      return linkText;
    };

    FreeTextBrowsing.prototype.getVisibleClickableElements = function() {
      var element, elements, i, j, len, len1, negativeRect, nonOverlappingElements, rects, ref, visibleElement, visibleElements;
      elements = document.documentElement.getElementsByTagName("*");
      visibleElements = [];
      for (i = 0, len = elements.length; i < len; i++) {
        element = elements[i];
        visibleElement = this.getVisibleClickable(element);
        visibleElements.push.apply(visibleElements, visibleElement);
      }
      nonOverlappingElements = [];
      visibleElements = visibleElements.reverse();
      while (visibleElement = visibleElements.pop()) {
        rects = [visibleElement.rect];
        for (j = 0, len1 = visibleElements.length; j < len1; j++) {
          negativeRect = visibleElements[j].rect;
          rects = (ref = []).concat.apply(ref, rects.map(function(rect) {
            return Rect.subtract(rect, negativeRect);
          }));
        }
        if (rects.length > 0) {
          nonOverlappingElements.push({
            element: visibleElement.element,
            rect: rects[0]
          });
        } else {
          if (!visibleElement.secondClassCitizen) {
            nonOverlappingElements.push(visibleElement);
          }
        }
      }
      return nonOverlappingElements;
    };

    return FreeTextBrowsing;

  })();

  window.FreeTextBrowsing = FreeTextBrowsing;

}).call(this);
